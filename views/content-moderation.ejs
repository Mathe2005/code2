
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= guild.name %> - Content Moderation</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --bg-color: #36393f;
            --sidebar-bg: #2f3131;
            --text-color: #dcddde;
            --accent-color: #7289da;
            --danger-color: #ff6b6b;
            --warning-color: #ffa500;
            --success-color: #00d26a;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .navbar {
            background-color: var(--sidebar-bg) !important;
        }

        .card {
            background-color: var(--sidebar-bg);
            border: 1px solid #40444b;
        }

        .btn-primary {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
        }

        .form-control, .form-select, .form-check-input {
            background-color: #40444b;
            border-color: #40444b;
            color: var(--text-color);
        }

        .form-control:focus, .form-select:focus {
            background-color: #40444b;
            border-color: var(--accent-color);
            color: var(--text-color);
            box-shadow: 0 0 0 0.2rem rgba(114, 137, 218, 0.25);
        }

        .severity-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .severity-low { background-color: var(--success-color); }
        .severity-medium { background-color: var(--warning-color); }
        .severity-high { background-color: var(--danger-color); }

        .detection-result {
            margin-top: 15px;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid;
        }

        .detection-result.clean {
            background-color: rgba(0, 210, 106, 0.1);
            border-color: var(--success-color);
        }

        .detection-result.flagged {
            background-color: rgba(255, 107, 107, 0.1);
            border-color: var(--danger-color);
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9em;
        }

        .breadcrumb-item {
            color: #b3b3b3;
            text-decoration: none;
            transition: color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .breadcrumb-item:hover {
            color: #7289da;
        }

        .breadcrumb-separator {
            color: #666;
            font-weight: bold;
        }

        .breadcrumb-current {
            color: #ffffff;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .word-list {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #40444b;
            border-radius: 8px;
            padding: 10px;
        }

        .word-tag {
            display: inline-block;
            background-color: #40444b;
            color: var(--text-color);
            padding: 4px 8px;
            margin: 2px;
            border-radius: 12px;
            font-size: 0.85em;
        }

        .word-tag.remove {
            cursor: pointer;
            background-color: var(--danger-color);
        }

        .test-area {
            background-color: #40444b;
            border: 1px solid #4f545c;
            border-radius: 8px;
            padding: 15px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fab fa-discord"></i> Bot Dashboard
            </a>
            <div class="navbar-nav ms-auto">
                <% if (user) { %>
                    <div class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <img src="https://cdn.discordapp.com/avatars/<%= user.id %>/<%= user.avatar %>.png?size=128" 
                                 alt="User Avatar" class="rounded-circle me-2" style="width: 32px; height: 32px;">
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="/dashboard">მთავარი გვერდი</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="/logout">გასვლა</a></li>
                        </ul>
                    </div>
                <% } else { %>
                    <a class="nav-link" href="/auth/discord">Login with Discord</a>
                <% } %>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <nav class="breadcrumb">
                            <a href="/dashboard" class="breadcrumb-item">
                                <i class="fas fa-home"></i>
                                Dashboard
                            </a>
                            <span class="breadcrumb-separator">/</span>
                            <a href="/dashboard/<%= guild.id %>" class="breadcrumb-item">
                                <%= guild.name %>
                            </a>
                            <span class="breadcrumb-separator">/</span>
                            <span class="breadcrumb-current">
                                <i class="fas fa-shield-alt"></i>
                                Content Moderation
                            </span>
                        </nav>
                    </div>
                    <div class="card-body">
                        <!-- Settings Section -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h5><i class="fas fa-cog"></i> Moderation Settings</h5>
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="enableModeration" checked>
                                                <label class="form-check-label" for="enableModeration">
                                                    Enable Content Moderation
                                                </label>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="enableGeorgian" checked>
                                                <label class="form-check-label" for="enableGeorgian">
                                                    Enable Georgian Word Detection
                                                </label>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Action on Detection</label>
                                            <select class="form-select" id="actionType">
                                                <option value="warn">Warn User</option>
                                                <option value="delete">Delete Message</option>
                                                <option value="timeout">Timeout User</option>
                                                <option value="kick">Kick User</option>
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Sensitivity Level</label>
                                            <select class="form-select" id="sensitivityLevel">
                                                <option value="low">Low (Only severe violations)</option>
                                                <option value="medium" selected>Medium (Recommended)</option>
                                                <option value="high">High (Strict filtering)</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h5><i class="fas fa-list"></i> Word Management</h5>
                                        <div class="mb-3">
                                            <label class="form-label">Add Custom Bad Word</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="newBadWord" placeholder="Enter word...">
                                                <button class="btn btn-primary" id="addWordBtn">Add</button>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Custom Bad Words</label>
                                            <div class="word-list" id="customWords">
                                                <!-- Custom words will be displayed here -->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Test Section -->
                        <div class="card mt-4">
                            <div class="card-body">
                                <h5><i class="fas fa-vial"></i> Test Content Detection</h5>
                                <div class="test-area">
                                    <div class="mb-3">
                                        <label class="form-label">Test Message</label>
                                        <textarea class="form-control" id="testMessage" rows="3" placeholder="Type a message to test the detection system..."></textarea>
                                    </div>
                                    <button class="btn btn-primary" id="testBtn">Test Detection</button>
                                    <div id="testResult"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Channel Monitoring Section -->
                        <div class="card mt-4">
                            <div class="card-body">
                                <h5><i class="fas fa-eye"></i> Channel Monitoring</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">Monitored Channels</label>
                                        <div class="mb-3">
                                            <% if (guild.channels && guild.channels.length > 0) { %>
                                                <% guild.channels.forEach(channel => { %>
                                                    <div class="form-check">
                                                        <input class="form-check-input channel-checkbox" type="checkbox" id="channel_<%= channel.id %>" value="<%= channel.id %>" checked>
                                                        <label class="form-check-label" for="channel_<%= channel.id %>">
                                                            # <%= channel.name %>
                                                        </label>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <p class="text-muted">No channels available</p>
                                            <% } %>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Excluded Roles</label>
                                        <div class="mb-3">
                                            <% if (guild.roles && guild.roles.length > 0) { %>
                                                <% guild.roles.forEach(role => { %>
                                                    <div class="form-check">
                                                        <input class="form-check-input role-checkbox" type="checkbox" id="role_<%= role.id %>" value="<%= role.id %>">
                                                        <label class="form-check-label" for="role_<%= role.id %>">
                                                            <%= role.name %>
                                                        </label>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <p class="text-muted">No roles available</p>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mt-4">
                            <button class="btn btn-success" id="saveSettings">
                                <i class="fas fa-save"></i> Save Settings
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let customBadWords = [];

        // Add custom word
        document.getElementById('addWordBtn').addEventListener('click', function() {
            const word = document.getElementById('newBadWord').value.trim();
            if (word && !customBadWords.includes(word.toLowerCase())) {
                customBadWords.push(word.toLowerCase());
                updateCustomWordsDisplay();
                document.getElementById('newBadWord').value = '';
            }
        });

        // Remove custom word
        function removeWord(word) {
            customBadWords = customBadWords.filter(w => w !== word);
            updateCustomWordsDisplay();
        }

        // Update custom words display
        function updateCustomWordsDisplay() {
            const container = document.getElementById('customWords');
            container.innerHTML = '';
            
            // Ensure customBadWords is an array
            if (!Array.isArray(customBadWords)) {
                customBadWords = [];
            }
            
            if (customBadWords.length === 0) {
                container.innerHTML = '<p class="text-muted">No custom words added</p>';
                return;
            }

            customBadWords.forEach(word => {
                const tag = document.createElement('span');
                tag.className = 'word-tag remove';
                tag.textContent = word;
                tag.onclick = () => removeWord(word);
                tag.title = 'Click to remove';
                container.appendChild(tag);
            });
        }

        // Test detection
        document.getElementById('testBtn').addEventListener('click', async function() {
            const message = document.getElementById('testMessage').value.trim();
            if (!message) {
                alert('Please enter a message to test');
                return;
            }

            const testBtn = this;
            testBtn.disabled = true;
            testBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Testing...';

            try {
                const response = await fetch(`/api/dashboard/<%= guild.id %>/content-moderation/test`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        message,
                        sensitivity: document.getElementById('sensitivityLevel').value,
                        enableGeorgian: document.getElementById('enableGeorgian').checked
                    })
                });

                const result = await response.json();
                displayTestResult(result);
            } catch (error) {
                console.error('Test failed:', error);
                displayTestResult({
                    error: 'Network error occurred while testing content',
                    details: error.message
                });
            } finally {
                testBtn.disabled = false;
                testBtn.innerHTML = 'Test Detection';
            }
        });

        // Display test result
        function displayTestResult(result) {
            const container = document.getElementById('testResult');
            
            // Handle error response
            if (result.error) {
                container.innerHTML = `
                    <div class="detection-result flagged">
                        <i class="fas fa-exclamation-circle"></i>
                        <strong>Error</strong>
                        <p>${result.error}</p>
                        ${result.details ? `<p><small>Details: ${result.details}</small></p>` : ''}
                    </div>
                `;
                return;
            }

            if (result.isClean) {
                container.innerHTML = `
                    <div class="detection-result clean">
                        <i class="fas fa-check-circle"></i>
                        <strong>Clean Content</strong>
                        <p>No inappropriate content detected.</p>
                    </div>
                `;
            } else {
                const detectedWords = result.detectedWords || [];
                const severity = result.severity || 'unknown';
                const confidence = result.confidence || 0;

                container.innerHTML = `
                    <div class="detection-result flagged">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Content Flagged</strong>
                        <p>Detected issues:</p>
                        <ul>
                            ${detectedWords.length > 0 ? detectedWords.map(word => `<li>${word}</li>`).join('') : '<li>Unknown violations detected</li>'}
                        </ul>
                        <p><strong>Severity:</strong> <span class="severity-indicator severity-${severity}"></span>${severity.toUpperCase()}</p>
                        <p><strong>Confidence:</strong> ${Math.round(confidence * 100)}%</p>
                        <p><strong>Recommended Action:</strong> ${result.action || 'warn'}</p>
                    </div>
                `;
            }
        }

        // Save settings
        document.getElementById('saveSettings').addEventListener('click', async function() {
            const saveBtn = this;
            const originalText = saveBtn.innerHTML;
            
            // Show loading state
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

            const settings = {
                enableModeration: document.getElementById('enableModeration').checked,
                enableGeorgian: document.getElementById('enableGeorgian').checked,
                actionType: document.getElementById('actionType').value,
                sensitivityLevel: document.getElementById('sensitivityLevel').value,
                customWords: customBadWords,
                monitoredChannels: Array.from(document.querySelectorAll('.channel-checkbox:checked')).map(cb => cb.value),
                excludedRoles: Array.from(document.querySelectorAll('.role-checkbox:checked')).map(cb => cb.value)
            };

            try {
                console.log('Saving settings:', settings);
                
                const response = await fetch(`/api/dashboard/<%= guild.id %>/content-moderation/settings`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settings)
                });

                const result = await response.json();
                console.log('Save response:', result);
                
                if (result.success) {
                    // Show success state
                    saveBtn.innerHTML = '<i class="fas fa-check"></i> Saved!';
                    saveBtn.className = 'btn btn-success';
                    
                    // Reset button after 2 seconds
                    setTimeout(() => {
                        saveBtn.innerHTML = originalText;
                        saveBtn.className = 'btn btn-success';
                        saveBtn.disabled = false;
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Unknown error occurred');
                }
            } catch (error) {
                console.error('Save failed:', error);
                
                // Show error state
                saveBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Save Failed';
                saveBtn.className = 'btn btn-danger';
                
                // Reset button after 3 seconds
                setTimeout(() => {
                    saveBtn.innerHTML = originalText;
                    saveBtn.className = 'btn btn-success';
                    saveBtn.disabled = false;
                }, 3000);
                
                alert('Failed to save settings: ' + error.message);
            }
        });

        // Load settings on page load
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                const response = await fetch(`/api/dashboard/<%= guild.id %>/content-moderation/settings`);
                const settings = await response.json();
                
                if (settings.success && settings.data) {
                    const data = settings.data;
                    document.getElementById('enableModeration').checked = data.enableModeration !== false;
                    document.getElementById('enableGeorgian').checked = data.enableGeorgian !== false;
                    document.getElementById('actionType').value = data.actionType || 'warn';
                    document.getElementById('sensitivityLevel').value = data.sensitivityLevel || 'medium';
                    
                    // Ensure customWords is always an array
                    if (data.customWords && Array.isArray(data.customWords)) {
                        customBadWords = data.customWords;
                    } else {
                        customBadWords = []; // Initialize as empty array if not valid
                    }
                    updateCustomWordsDisplay();
                    
                    // Ensure monitoredChannels is an array before iterating
                    if (data.monitoredChannels && Array.isArray(data.monitoredChannels)) {
                        data.monitoredChannels.forEach(channelId => {
                            const checkbox = document.getElementById(`channel_${channelId}`);
                            if (checkbox) checkbox.checked = true;
                        });
                    }
                    
                    // Ensure excludedRoles is an array before iterating
                    if (data.excludedRoles && Array.isArray(data.excludedRoles)) {
                        data.excludedRoles.forEach(roleId => {
                            const checkbox = document.getElementById(`role_${roleId}`);
                            if (checkbox) checkbox.checked = true;
                        });
                    }
                }
            } catch (error) {
                console.error('Failed to load settings:', error);
            }
        });
    </script>
</body>
</html>
